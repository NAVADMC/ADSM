================
  Introduction
================

Quick link:  If you would like an HTML based version of this file, please
             open the file INSTALL.html .  That file contains hyperlinks to
             assist in navigating this install process.
             
NOTE:  Please be sure to read the dependencies and configuration options sections.  
       Most of the time, this package will not compile "out of the package" 
       using the configuration defaults.             
  
             
      
Operating Systems Tested
=========================
             
This program is known to function on the following systems as both a 
single run program and as a parallel implementation:


Windows
--------
Windows XP running (Cygwin)
Windows XP as a DLL joined with a Windows user interface, [ DLL compiled using
  MinGW ]
Windows 7 as a DLL joined with a Windows user interface, [ DLL compiled using
  MinGW ]


Linux [single CPU, SMP, and HPC systems]
-----------------------------------------
Fedora 6, 7, 8, 9, 10, 11 
Ubuntu 9.04
SUSE 10, 11
HP Linux XC 3.1 [See SHARCNET below]

NOTE:  Linux may also be used as the OS on high performance computing, (HPC),
       systems, such as Grids, and Clusters.
       
       

High Performance Grid Systems
------------------------------
SHARCNET Grid [Canada] ( Various operating systems, and grid sizes )


Parallel, High Performance Machines
------------------------------------
Sun: Sun-Fire 6000 parallel machine running SunOS 5.9 with
     48 sparc processors,96Gb RAM, and 1Tb storage.
     [CoGrid at Colorado State University]




Installation Instructions Summary
=================================


Like most Unix programs, ADSM can be built and installed by:

NOTE:  The standard configuration defaults usually are not what you will want,
       however, so it is best to examine the detailed sections below before
       running configure.

./configure
make
make install

If you have checked ADSM out of CVS instead of unpacking it from a
distribution tar file, you may need to type

sh bootstrap

first.

For MS-Windows instructions see below





============================================================================
  Installation Details 
  
  [UNIX based systems or UNIX emulators on MS-Windows, such as Cygwin]
============================================================================

Software Dependencies
=======================

     It is best to insure that you have the following software installed on your
system before proceeding with the configuration of the ADSM build environment.
However, if ADSM needs libraries that aren't present on your system, the
configure script will stop and inform you.  Some libraries may be available as
packages for your system; others you may need to download and compile.  

     For users who do not have root access to their UNIX system, and need to 
install missing software dependencies, these software packages may be installed
in your local home directory, as long as, you instruct the configure script
where to find the correct or missing versions of them.  See the configuration
options, in the section below this one, for details about specifying package
locations.  This includes the typical need to alter the CFLAGS and LDFLAGS 
environment variables.


For easy reference, the required libraries and the download location for their
sources are:


** IMPORTANT NOTE **
     If you need to compile a missing package, be sure to always compile it 
with the same compiler/linker combination as you intend to use with ADSM.
Also, be sure to enable any features such as MPI for those same packages, which
you also intend to enable for ADSM.
     This is especially important on parallel machines and other such "super
computer" systems!
*********************


GLib 2.4
ftp://ftp.gnome.org/pub/gnome/sources/glib/

GSL (GNU Scientific Library) 1.6
ftp://ftp.gnu.org/gnu/gsl/

R-Tree library
http://www.naadsm.org/opensource/rtree/

GPC (General Polygon Clipper) 2.32
http://www.cs.man.ac.uk/~toby/alan/software/

GD Graphics Library 2.0.33
http://www.boutell.com/gd/

Shapefile C Library 1.2
http://shapelib.maptools.org/

PROJ.4 Cartographic Projections library 4.6.0
http://trac.osgeo.org/proj/

(All version numbers come with an implied "or higher", however some systems
 may not be able to compile the latest versions, such as some parallel 
 machines, therefore, the "required" library version is recommended, over the
 "latest" version...)


Optional software
------------------

DIA:  dia version 0.94 is needed to compile some portions of the documentation.
Doxygen:  Doxygen is needed to compile some portions of the documentation.
Gnuplot:  Gnuplot is needed to create some portions of the documentation.

DejaGnu:  DejaGnu and TCL are needed to run any of the test programs.

NOTE:  By default the makefile system for this program will attempt to build
       the documentation.  This portion of the make runs after the program 
       has successfully built.  If this portion of the make fails, it does not
       mean that the program did not build correctly.  It typically means
       that you do not have some software, such as dia or doxygen, needed
       by the documentation build.


Configuration options
=====================

     Configuration options for this software can not usually be left to their
default values.  There are significant differences between systems and even 
some implementations of the external packages used during compilation.
Therefore, it is very important to read this section carefully and make note
of the configuration options you will need to specify.
     Also, it is a wise practice to copy the configuration options and their
associated values to a separate file for storage and backup in case you need to
re-compile the code at some later date.  This is because the configure script
log file will be overwritten with each configuration run, and thus these values,
as recorded by the log file, will be lost.  In some cases the options and values
needed are sufficiently long that they are difficult to remember after a few 
weeks of not needing to know them.
     Some users find it useful to record these options and values for their
system in a shell script, so that all they need to do in the future is re-run
the shell script to re-configure and re-compile.


When you run configure, the configuration options you should know about are:

Installation location
----------------------
--prefix=PATH

The default is to install to /usr/local (i.e., the executable `adsm' goes
in /usr/local/bin, the supporting libraries in /usr/local/lib).  The install
process will create bin, lib, and include directories inside the installation
folder if they do not already exist.  

Note:  Not all users, especially on UNIX systems, will have write access to the 
       /usr/local path.  In these cases it is advisable to specify a path, which
       the user has write access to, such as their "home" path.



CFLAGS and LDFLAGS
-------------------
     There are special --with-xxx-cflags and --with-xxx-libs options for specifying
the locations of header files and libraries for some other components (SPRNG,
GSL), too.  Example:  --with-gsl-cflags="-I/usr/home/me/gsl/include"  OR
--with-gsl-libs="-L/usr/home/me/gsl/lib -lgsl"  etc...

     If there aren't explicit configure options for a particular library, you can
add the appropriate -I and -L options to the CFLAGS and LDFLAGS environment
variables before running configure.  

  !! NOTE:  Be sure to set the environment variables CFLAGS and LDFLAGS PRIOR
            to running the configuration script !!



Debugging and logging
----------------------

--enable-debug=no

     The debug level is quite verbose and is useful with small, short test
cases, but it slows ADSM down considerably.  This switch disables
debugging information to produce a much faster-running program.

     NOTE:  If you specify "yes" after this switch, then the feature will
            be "enabled", instead.  Specifying no word, "yes" or "no" after an
            --enable-<feature> switch will cause the feature to be "enabled".


Alternate output formats
-------------------------

     To enable an alternate output format, which creates SQL statements for later
insertion into a MySQL database, choose:

     --enable-sc-guilib=yes



See also:  [** Recommended **]
-------------------------------

./configure --help

for other options' details.





============================================================================
  MS-Windows Installation
  [Without UNIX emulation]
============================================================================

     To use ADSM on MS-Windows without some form of UNIX emulator, it
should be built as a DLL to be used by the graphical user interface for Windows.
     However, this portion of the software is available already built as part 
of a regular ADSM installation package.  It is highly recommended that 
you obtain the DLL in that fashion rather than attempt to build it yourself.  
Furthermore, each version of the GUI for Windows comes pre-built with an 
understanding of what version of the simulation library it needs.  Building
your own version of this library as a DLL, may cause the GUI to no longer
function, or to function incorrectly.


MS-Windows Installation for Experts ONLY
=========================================

     Building a copy of the simulation code as a DLL for use by the ADSM
GUI, or for use in some other GUI, should be considered an EXPERIMENTAL function
for anyone outside of the ADSM software engineering team.  As stated above,
there should be no reason to attempt this task, however, if you must for some
reason, then these instructions, below, are provided to assist you do so, but
are not guaranteed to function.  

Warning:  It is best to download the ADSM package for MS-Windows as a whole 
          and use the DLL contained therein.  Overwriting that DLL with your
          own version can cause the package to no longer function correctly,
          or to cease functioning entirely.  Before proceeding with these
          instructions, BACKUP your original ADSM installation package in case
          you need to recover the original DLL.



Software Required to Build the DLL
====================================

1)  MinGW
2)  Dev-C++ (http://www.bloodshed.net/devcpp.html)

3)  See the dependencies section above for the various external libraries also
 needed...NOTE:  No instruction will be given here on how to build and install
 those code packages and libraries for your MS-Windows system.  That function
 is beyond the scope of this document.



Building the DLL
=================

     Once you have installed MinGW, then Dev-C++, then the libraries and 
packages described in the dependencies section, open the adsm.dev project file
in the DLL directory of the ADSM source tree, with Dev-C++.  From here you
will need to modify the makefile and include lib search and link paths to match
those of your own system.  

     NOTE:  You do not need to run the configure script, bootstrap, or edit
            ANY Makefile's outside of the DLL directory.
            
     After insuring that the makefile, and dev-c++ project file have been updated 
to reflect your system, run the compilation in Dev-C++.  There will be a few 
warnings, but there should not be any errors.  When the compilation is complete, 
you will have a adsm.dll file located in the DLL directory.  Copy or paste
this file into your ADSM GUI program file directory and run the GUI as you
normally would.

     If the GUI produces an error about the version of the DLL, you have the 
wrong version of simulation source code for that version of the GUI.  You must 
get a copy of the correct version of the simulation code and start over from the 
beginning of this section.




============================================================================
  Additional General Information
============================================================================



Documentation
=============

The documentation includes many diagrams, and many of the diagrams are built
from gnuplot or Dia (http://www.gnome.org/projects/dia/) source files as part
of the "make" process.

If you don't have dia installed, make will stop and complain.  But that's not a
problem: the diagrams are deliberately the last step in the build process, so
if you get to that point, the executable program is already built.

The developer documentation for ADSM is in HTML format and is created by
the free tool Doxygen (http://doxygen.org/).  To build the documentation, cd to
the directory in which you compiled ADSM and type 'doxygen'.  You can then
open the file `doc/html/index.html' in your browser.


Testing the program
===================

If the dejagnu testing framework (http://www.gnu.org/software/dejagnu/ ) is
available on your system, you can run the regression test suite.

After compiling, cd to the `models' directory and type `make check' to test
that ADSM is working.  It will run the tests and output a report file
named "module.sum".

(Note that "make check" will run a copy of ADSM built without MPI, so it
will run just on the node you're logged into -- you don't need to worry about
how to submit it to your cluster's job-control system.)

Up to 10 of the tests may fail with an error message like "outcome 1 should
occur with frequency 0.5, not 0.6".  These are not necessarily cause for alarm!
They're from stochastic tests, where we run a scenario many times and check
that each actual outcome matches one of n expected outcomes, and that the
outcomes occur with the expected frequencies.

I've found that you may need 100,000 iterations or more before the actual
frequencies get "close enough" to the expected frequencies to pass the test.
But that takes a long time, and if you don't know it's happening you may look
at the testing and think it has locked up.  If you want to run the stochastic
tests with enough iterations to get proper results, open the file

models/test/config/unix.exp

in a text editor and find the function "stochastic_progress_test" (search for
the line that begins with "proc stochastic_progress_test").  Edit the part that
says "{iterations 100}", replacing 100 with a higher number of iterations.  Do
the same for the function "stochastic_variable_test".

Another 10 tests that calculate the area and perimeter of zones may also fail.
Zone circles are approximated by polygons, and so the calculated area and
perimeter will not be exactly the same as the "true" values based on circles.




Using the program
=================

     Before attempting to use the software, be sure that you executed:

make install

     from the command line, which copies all of the executable(s) and libraries
into the appropriate directories.


     If you are reading this file, then you are probably installing ADSM
on a multi-processor machine or on a cluster.  This section is meant to be a
quick-start guide to running ADSM from the command line: it describes a
sequence of commands to generate simulation results, and then to post-process
them into tables and plots.  However, some information is also included below
concerning  standalone systems, such as MS-Windows and UNIX desktops.



Command line options
---------------------

     These are valid and the same for all installations of ADSM except
the MS-Windows DLL, which has no main() entry point, as it is not a standalone
program.

Running "adsm --help" from the command line will give you a basic list of
these command line options.  They are as follows:

Usage:  adsm [OPTIONS] <scenario-file.xml>

Where [OPTIONS] are:

  -p, --population-file=population-file           Population file

     The population file is a mandatory option.  The file name should contain
the entire path to the file, also.

  -V, --verbosity=verbosity                       Message verbosity level (0 = simulation output only, 1 = + debugging output)

     If you compiled the program with the --enable-debug configuration script
switch set, then this parameter allows you to vary the level of information to
output.  It is best to specify this parameter as -V0 for all non-testing runs
of ADSM.


  -o, --output-file=output-file                   Output file

     This options specifies a file name, and location, to which to write the 
simulation output.  If you do not specify this parameter, all simulation 
output will be written to stdout.


  -r, --fixed-random-value=fixed-random-value     Fixed number to use instead of random numbers

  -p, --production-types=production-types         File containing production types used in this scenario

     This option currently specifies an additional file to be used by the 
--enable-sc-guilib configuration script switch changes to the compiled code.
This option is mandatory if you use the --enable-sc-guilib switch, but not
needed otherwise.  In the future, this information, contained in this file,
will be merged with the scenario file, specified lastly on the command line, 
<scenario-file.xml>.


Help options:
-------------
  -?, --help                                      Show this help message
  --usage                                         Display brief usage message



<scenario-file.xml> :  This mandatory parameter to ADSM contains scenario
specific information for this simulation.  This was generated by one of several
methods.  It is recommended, however, that it be generated by using the
MS-Windows ADSM GUI.






MS-Windows
-----------

     Using MS-Windows you have two basic options:

     1)  Run the GUI, adsm.exe, which knows how to interface with
the simulation DLL, which you should have downloaded as a package from the main
ADSM web site.
  
     2)  Using Cygwin, run the ADSM executable as suggested for a stand-
alone, UNIX system, specified below.



Standalone UNIX system
-----------------------

     Recall that during configuration you may have specified the option:

--prefix=""

     The value you placed inside of the quotes will now contain a bin directory, 
which contains the ADSM executable.  If you did not specify this switch
the program was installed into the standard /usr/local directory structure, if
you had write permissions to that directory structure.


     To run ADSM simply choose the appropriate options, described above, and
specify them on the command line: 

[Example]
%adsm -p /home/me/myherds.xml -m /home/me/models -V0 -o /home/me/results.txt  /home/me/scenario.xml



SHARCNet specific 
------------------
     These commands are used at the site of the first ADSM
installation, in Guelph, Ontario, on SHARCNet machines.  The intention is to
provide outputs in a format that is familiar to users of the Windows version of
ADSM.  You can of course customize the commands to produce different outputs.

To avoid filename collisions, you may want to give each simulation a unique ID
(distinct from the job IDs assigned by your cluster's job-control system).  In
the example below the ID is "1000":

sqsub -q mpi -n 4 -e adsm_1000.err bin/adsm -h herdfile.xml -o adsm_1000_.log paramfile.xml

This is the command to run a simulation, on a SHARCNet machine.  sqsub is the
job-control system, mpi is the queue, 4 is the number of CPUs, and -e specifies
a file to write error messages to.  The -o option specifies the name of the
output files and is an option to ADSM, not to the job-control system.
Consult with your supercomputer administrator to find out the equivalent
options for your job-control system.  The directory from which to issue this
command is whatever directory your copy of ADSM went into when you did "make
install".

If you are running on a single-processor machine, for example, on an individual
node in a serial farm, the command-line would become:

bin/adsm -h herdfile.xml -o 1000.log paramfile.xml

Again, the directory from which to issue this command is whatever directory
your copy of ADSM went into when you did "make install".




Finding and analyzing output using ADSM filter software
---------------------------------------------------------

**  This section only applies if you did NOT use the --enable-sc-guilib 
configuration script switch, otherwise you must insert the result data into 
your MySQL server and analyze the results using SQL queries and other software
packages.



  When the job completes, the working directory contains 1 output file per CPU,
named adsm_1000_0.log, adsm_1000_1.log, etc.  Issue the commands:

cat adsm_1000_*.log > 1000.log
rm adsm_1000_*.log

to get all the output in one file.  That way the outputs from each node aren't
interleaved.

Next, to make some spreadsheets:

bin/full_table_filter < 1000.log > 1000_full_table.txt
bin/table_filter < 1000.log > 1000_summary.txt
bin/exposures_table_filter herdfile.xml < 1000.log > 1000_exposures.txt
bin/apparent_events_table_filter herdfile.xml < 1000.log > 1000_apparent_events.txt
bin/state_table_filter < 1000.log > 1000_states.txt

These files are all in comma-separated value format.

Next, graphs (these require gnuplot and python on your system):

bin/graph.py --epsfile 1000_states.eps --right-y "tsdU" < 1000_full_table.txt
bin/graph.py --epsfile 1000_states_disease.eps --exclude "Susc,Imm,Dest" "tsdU" < 1000_full_table.txt
bin/graph.py --epsfile 1000_epidemic_daily.eps "infnU...$" < 1000_full_table.txt
bin/graph.py --epsfile 1000_epidemic_cumul.eps "infcU...$" < 1000_full_table.txt
bin/graph.py --epsfile 1000_apparent_epidemic_daily.eps "detnUClin$" < 1000_full_table.txt
bin/graph.py --epsfile 1000_apparent_epidemic_cumul.eps "detcUClin$" < 1000_full_table.txt

The graphs come out in eps format, but if you have the "convert" executable on
your system from the open source imagemagick package, you can quickly turn
those into something more easily viewable.  Running convert with the option
"-density 150x150" makes easy-to-read png files.

Next, make weekly snapshots of the herd states for one iteration (the first),
and a file that cuts up the study area into grid squares and attempts to
summarize certain variables in those grid squares.

bin/xml2shp herdfile.xml 1000
(that outputs a template arcview file, 1000.shp/shx/dbf)

bin/weekly_gis_filter 1000.shp < 1000_states.txt
(that outputs a series of files named 1000_dayNNNN.shp/shx/dbf)

bin/summary_gis_filter herdfile.xml 1000_summary.shp < 1000_states.txt
(that outputs an arcview file, 1000_summary.shp/shx/dbf)

Create an image file of the final day (say for example the final day was day
365):

bin/shp2png 1000_day0365.shp 1000_day0365.png

Create an image file of the grid squares, coloured in shades of red to indicate
average fraction of herds infected:

bin/shp2png2 --min-value=0.0 --max-value=1.0 1000_summary.shp avgfrinf ffffff cc0000 1000_avgfrinf.png

Create an image file of the grid squares, coloured in shades of grey to
indicate average fraction of herds destroyed:

bin/shp2png2 --min-value=0.0 --max-value=1.0 1000_summary.shp avgfrdest ffffff 000000 1000_avgfrdest.png

Finally, bundle all those weekly snapshot GIS files into a zip file:

zip 1000_gis.zip 1000*.shp 1000*.shx 1000*.dbf
rm 1000*.shp 1000*.shx 1000*.dbf

At the end of this sequence of commands you will have:
1 error log file (hopefully zero size)
5 spreadsheets (in comma-separated text format)
6 graphs (in eps format from gnuplot)
1 image of the herd states on the final day of 1 iteration
1 image of the extent of infection (over all iterations)
1 image of the extent of destruction (over all iterations)
a zip archive of ArcView files showing herd states weekly over 1 iteration

As mentioned above, this is not a comprehensive set of outputs.  This list of
outputs has grown as users at Guelph have identified outputs that would be
useful to them.  Feel free to use the commands above as a starting point for
customization and producing the right set out outputs for your or your users'
work.
