set timeout 3
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}

#
# Test destroying a susceptible unit.  For this first test, allow one day to
# pass before destroying the unit.
#
set test "destroy_1"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "unit (\"beef\",25,0,0)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Susc"]]
if { [string compare $error ""] == 0 } {
	send "destroy (0)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Dest" "Dest"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test that healthy units end up in the "Destroyed" state when destroyed.
#
set test "destroy_healthy_unit_1"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "unit (\"beef\",25,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "vaccinate (0,1,2)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Susc" "VImm"]]
if { [string compare $error ""] == 0 } {
	send "destroy (0)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Dest" "Dest" "Dest" "Dest" "Dest"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

set test "destroy_healthy_unit_2"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "unit (\"beef\",25,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "infect (0,1,0,1,2)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Lat" "Clin" "NImm"]]
if { [string compare $error ""] == 0 } {
	send "destroy (0)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Dest" "Dest" "Dest" "Dest" "Dest"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test that diseased units end up in the "Destroyed" state when destroyed.
#
set test "destroy_diseased_unit_1"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "unit (\"beef\",25,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "infect (0,2,1,1,1)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Lat"]]
if { [string compare $error ""] == 0 } {
	send "destroy (0)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Dest" "Dest" "Dest" "Dest" "Dest"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

set test "destroy_diseased_unit_2"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "unit (\"beef\",25,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "infect (0,1,2,1,1)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Lat" "Subc"]]
if { [string compare $error ""] == 0 } {
	send "destroy (0)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Dest" "Dest" "Dest" "Dest" "Dest"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

set test "destroy_diseased_unit_3"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "unit (\"beef\",25,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "infect (0,1,1,2,1)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Lat" "Subc" "Clin"]]
if { [string compare $error ""] == 0 } {
	send "destroy (0)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Dest" "Dest" "Dest" "Dest" "Dest"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}
