set timeout 3
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}

#
# Test that the progression of a vaccination works correctly.
#
set test "vaccinate_1"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "vaccinate (0,1,2)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Susceptible" "Vaccine Immune" "Vaccine Immune" "Susceptible" "Susceptible" "Susceptible"]]
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test the progression when there is no delay.
#
set test "vaccinate_with_no_delay"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "vaccinate (0,0,2)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Vaccine Immune" "Vaccine Immune" "Susceptible" "Susceptible" "Susceptible"]]
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test that you cannot vaccinate a dead herd.
#
set test "vaccinate_dead_herd"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "destroy (0)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Destroyed"]]
if { [string compare $error ""] == 0 } {
	send "vaccinate (0,1,2)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Destroyed" "Destroyed" "Destroyed" "Destroyed" "Destroyed"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test that you cannot vaccinate an infected herd.
#
set test "vaccinate_diseased_herd_1"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "infect (0,2,0,1,1)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Latent"]]
if { [string compare $error ""] == 0 } {
	send "vaccinate (0,4,1)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Latent" "Infectious Clinical" "Naturally Immune" "Susceptible" "Susceptible" "Susceptible" "Susceptible" "Susceptible"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

set test "vaccinate_diseased_herd_2"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "infect (0,1,0,2,1)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Latent" "Infectious Clinical"]]
if { [string compare $error ""] == 0 } {
	send "vaccinate (0,3,1)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Infectious Clinical" "Naturally Immune" "Susceptible" "Susceptible" "Susceptible" "Susceptible" "Susceptible"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test that you cannot double-vaccinate a herd.
#
set test "no_double_vaccinate"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "vaccinate (0,3,2)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Susceptible"]]
if { [string compare $error ""] == 0 } {
	send "vaccinate (0,1,2)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Susceptible" "Susceptible" "Vaccine Immune" "Vaccine Immune" "Susceptible" "Susceptible" "Susceptible" "Susceptible" "Susceptible"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}

#
# Test that infection cancels out a vaccination.
#
set test "vaccinate_cancelled_by_infection"
send "reset\n"
expect {
	-re "$prompt$" { }
}
send "herd (\"beef\",1,0,0)\n"
expect {
	-re "$prompt$" { }
}
send "vaccinate (0,5,2)\n"
expect {
	-re "$prompt$" { }
}
set error [progression_test [list "Susceptible"]]
if { [string compare $error ""] == 0 } {
	send "infect (0,1,0,1,1)\n"
	expect {
		-re "$prompt$" { }
	}
	set error [progression_test [list "Latent" "Infectious Clinical" "Naturally Immune" "Susceptible" "Susceptible" "Susceptible" "Susceptible" "Susceptible"]]
}
if { [string compare $error ""] == 0 } {
	pass "$test"
} else {
	fail "$test $error"
}
