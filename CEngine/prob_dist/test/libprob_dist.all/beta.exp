set timeout 10
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}

#
# Test that the parameters are set correctly when a beta distribution is
# created.
#
set test "create"
set true_alpha 1.0
set true_beta 2.0
set true_location 0.0
set true_scale 1.0
send "beta ($true_alpha,$true_beta,$true_location,$true_scale)\n"
expect {
	-re "<beta probability distribution\[\\n\\r\]+ alpha=($floatpat) beta=($floatpat)\[\\n\\r\]+ location=($floatpat) scale=($floatpat)>.*$prompt$" {
		set alpha $expect_out(1,string)
		if { [fcmp $alpha $true_alpha $epsilon] != 0 } {
			fail "$test alpha should be $true_alpha, not $alpha"
		} else {
			set beta $expect_out(2,string)
			if { [fcmp $beta $true_beta $epsilon] != 0 } {
				fail "$test beta should be $true_beta, not $beta"
			} else {
				set location $expect_out(3,string)
				if { [fcmp $location $true_location $epsilon] != 0 } {
				  fail "$test location should be $true_location, not $location"
				} else {
					set scale $expect_out(4,string)
					if { [fcmp $scale $true_scale $epsilon] != 0 } {
						fail "$test scale should be $true_scale, not $scale"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Test the probability density function.  "Correct" values hand-calculated
# using formulas in "A Compendium of Common Probability Distributions".
#
set xvalues {-0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0}
set answers {0 2 1.8 1.6 1.4 1.2 1.0 0.8 0.6 0.4 0.2 0}
pdf_test $xvalues $answers



#
# Test the cumulative distribution function and its inverse.  "Correct" values
# hand-calculated using formulas in "A Compendium of Common Probability
# Distributions".
#
set xvalues {-0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0}
set answers {0 0 0.19 0.36 0.51 0.64 0.75 0.84 0.91 0.96 0.99 1}
cdf_test $xvalues $answers "cdf"



#
# Test statistics.
#
#set min
#set max
#set mean 
#set variance
#statistics_test $min $max $mean $variance
sample_statistics_test



#
# Create the same distribution again, but "stretched" 10x and shifted 2 to the
# right.
#
set test "create_stretched"
set true_alpha 1.0
set true_beta 2.0
set true_location 2.0
set true_scale 12.0
send "beta ($true_alpha,$true_beta,$true_location,$true_scale)\n"
expect {
	-re "<beta probability distribution\[\\n\\r\]+ alpha=($floatpat) beta=($floatpat)\[\\n\\r\]+ location=($floatpat) scale=($floatpat)>.*$prompt$" {
		set alpha $expect_out(1,string)
		if { [fcmp $alpha $true_alpha $epsilon] != 0 } {
			fail "$test alpha should be $true_alpha, not $alpha"
		} else {
			set beta $expect_out(2,string)
			if { [fcmp $beta $true_beta $epsilon] != 0 } {
				fail "$test beta should be $true_beta, not $beta"
			} else {
				set location $expect_out(3,string)
				if { [fcmp $location $true_location $epsilon] != 0 } {
				  fail "$test location should be $true_location, not $location"
				} else {
					set scale $expect_out(4,string)
					if { [fcmp $scale $true_scale $epsilon] != 0 } {
						fail "$test scale should be $true_scale, not $scale"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Test the probability density function.  "Correct" values hand-calculated
# using formulas in "A Compendium of Common Probability Distributions".
#
set xvalues {-1 0 1 2 3 4 5 6 7 8 9 10 11 12}
set answers {0 0 0 0.2 0.18 0.16 0.14 0.12 0.10 0.08 0.06 0.04 0.02 0}
pdf_test $xvalues $answers



#
# Test the cumulative distribution function and its inverse.  "Correct" values
# hand-calculated using formulas in "A Compendium of Common Probability
# Distributions".
#
set xvalues {-1 0 1 2 3 4 5 6 7 8 9 10 11 12}
set answers {0 0 0 0 0.19 0.36 0.51 0.64 0.75 0.84 0.91 0.96 0.99 1}
cdf_test $xvalues $answers "cdf"



#
# Test random number generation.
#
set true_answer {0 0 0 0.19 0.17 0.15 0.13 0.11 0.09 0.07 0.05 0.03 0.01}
random_number_test $true_answer -1



#
# Test statistics.
#
#set min
#set max
#set mean 
#set variance
#statistics_test $min $max $mean $variance
sample_statistics_test



#
# Create another beta distribution.
#
set test "create"
set true_alpha 4.0
set true_beta 2.0
set true_location 0.0
set true_scale 1.0
send "beta ($true_alpha,$true_beta,$true_location,$true_scale)\n"
expect {
	-re "<beta probability distribution\[\\n\\r\]+ alpha=($floatpat) beta=($floatpat)\[\\n\\r\]+ location=($floatpat) scale=($floatpat)>.*$prompt$" {
		set alpha $expect_out(1,string)
		if { [fcmp $alpha $true_alpha $epsilon] != 0 } {
			fail "$test alpha should be $true_alpha, not $alpha"
		} else {
			set beta $expect_out(2,string)
			if { [fcmp $beta $true_beta $epsilon] != 0 } {
				fail "$test beta should be $true_beta, not $beta"
			} else {
				set location $expect_out(3,string)
				if { [fcmp $location $true_location $epsilon] != 0 } {
				  fail "$test location should be $true_location, not $location"
				} else {
					set scale $expect_out(4,string)
					if { [fcmp $scale $true_scale $epsilon] != 0 } {
						fail "$test scale should be $true_scale, not $scale"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Test the probability density function.  "Correct" values hand-calculated
# using formulas in "A Compendium of Common Probability Distributions".
#
set xvalues {-0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0}
set answers {0 0 0.018 0.128 0.378 0.768 1.250 1.728 2.058 2.048 1.458 0}
pdf_test $xvalues $answers



#
# Test the cumulative distribution function and its inverse.  "Correct" values
# hand-calculated using formulas in "A Compendium of Common Probability
# Distributions".
#
set xvalues {-0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0}
set answers {0 0 0.00046 0.00672 0.03078 0.08704 0.1875 0.33696 0.52822 0.73728 0.91854 1}
cdf_test $xvalues $answers "cdf"

#
# Test statistics.
#
#set min
#set max
#set mean 
#set variance
#statistics_test $min $max $mean $variance
sample_statistics_test
