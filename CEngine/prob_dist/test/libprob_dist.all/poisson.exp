set timeout 10
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}

#
# Test that the parameters are set correctly when a Poisson distribution is
# created.
#
set test "create"
send "poisson (3)\n"
expect {
	-re "<Poisson probability distribution\[\\n\\r\]+ mean=($floatpat)>.*$prompt$" {
		set mean $expect_out(1,string)
		if { [fcmp $mean 3 $epsilon] != 0 } {
			fail "$test mean should be 4, not $mean"
		} else {
			pass "$test"
		}
	}
}



#
# Test the probability density function.  "Correct" values from CRC Standard
# Mathematical Tables, 27th ed., chapter 12.
#
set xvalues {0 1 2 3 4 5 6}
set answers {0.0498 0.1493 0.2241 0.2240 0.1681 0.1008 0.0504}
pdf_test $xvalues $answers



#
# Test the cumulative distribution function and its inverse.  "Correct" values
# from CRC Standard Mathematical Tables, 27th ed., chapter 12.
#
set xvalues {-1 0 1 2 3 4 5}
set answers {0 0.0498 0.1991 0.4232 0.6472 0.8153 0.9161}
cdf_test $xvalues $answers "cdf" $answers



#
# Test random number generation.
#
set true_answer {0 0.0498 0.1493 0.2241 0.2240 0.1681 0.1008 0.0504}
random_number_test $true_answer -1



#
# Test statistics.
#
#set min
#set max
#set mean
#set variance
#statistics_test $min $max $mean $variance
sample_statistics_test



