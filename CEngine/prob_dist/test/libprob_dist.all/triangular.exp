set timeout 10
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}



#
# Test that the parameters are set correctly when a triangular distribution is
# created.
#
set test "create"
send "triangular (1,2,6)\n"
expect {
	-re "<triangular probability distribution\[\\n\\r\]+ a=($floatpat), c=($floatpat), b=($floatpat)\[\\n\\r\]+ P=($floatpat)>.*$prompt$" {
		set a $expect_out(1,string)
		if { [fcmp $a 1 $epsilon] != 0 } {
			fail "$test a should be 1, not $a"
		} else {
			set c $expect_out(2,string)
			if { [fcmp $c 2 $epsilon] != 0 } {
				fail "$test c should be 2, not $c"
			} else {
				set b $expect_out(3,string)
				if { [fcmp $b 6 $epsilon] != 0 } {
					fail "$test b should be 6, not $b"
				} else {
					set P $expect_out(4,string)
					if { [fcmp $P 0.2 $epsilon] != 0 } {
						fail "$test P should be 0.2, not $P"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Test that a "point" distribution is returned if a=b=c.
#
set test "create_all_same_value"
send "triangular (2,2,2)\n"
expect {
	-re "<point probability distribution\[\\n\\r\]+ value=($floatpat)>.*$prompt$" {
		set point $expect_out(1,string)
		if { [fcmp $point 2 $epsilon] == 0 } {
			pass "$test"
		} else {
			fail "$test value should be 2, not $point"
		}
	}
}



#
# Test giving the arguments out of order.  The function shouldn't care.
#
set test "create_args_out_of_order_132"
send "triangular (1,6,2)\n"
expect {
	-re "<triangular probability distribution\[\\n\\r\]+ a=($floatpat), c=($floatpat), b=($floatpat)\[\\n\\r\]+ P=($floatpat)>.*$prompt$" {
		set a $expect_out(1,string)
		if { [fcmp $a 1 $epsilon] != 0 } {
			fail "$test a should be 1, not $a"
		} else {
			set c $expect_out(2,string)
			if { [fcmp $c 2 $epsilon] != 0 } {
				fail "$test c should be 2, not $c"
			} else {
				set b $expect_out(3,string)
				if { [fcmp $b 6 $epsilon] != 0 } {
					fail "$test b should be 6, not $b"
				} else {
					set P $expect_out(4,string)
					if { [fcmp $P 0.2 $epsilon] != 0 } {
						fail "$test P should be 0.2, not $P"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Another out-of-order test.
#
set test "create_args_out_of_order_213"
send "triangular (2,1,6)\n"
expect {
	-re "<triangular probability distribution\[\\n\\r\]+ a=($floatpat), c=($floatpat), b=($floatpat)\[\\n\\r\]+ P=($floatpat)>.*$prompt$" {
		set a $expect_out(1,string)
		if { [fcmp $a 1 $epsilon] != 0 } {
			fail "$test a should be 1, not $a"
		} else {
			set c $expect_out(2,string)
			if { [fcmp $c 2 $epsilon] != 0 } {
				fail "$test c should be 2, not $c"
			} else {
				set b $expect_out(3,string)
				if { [fcmp $b 6 $epsilon] != 0 } {
					fail "$test b should be 6, not $b"
				} else {
					set P $expect_out(4,string)
					if { [fcmp $P 0.2 $epsilon] != 0 } {
						fail "$test P should be 0.2, not $P"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Another out-of-order test.
#
set test "create_args_out_of_order_231"
send "triangular (2,6,1)\n"
expect {
	-re "<triangular probability distribution\[\\n\\r\]+ a=($floatpat), c=($floatpat), b=($floatpat)\[\\n\\r\]+ P=($floatpat)>.*$prompt$" {
		set a $expect_out(1,string)
		if { [fcmp $a 1 $epsilon] != 0 } {
			fail "$test a should be 1, not $a"
		} else {
			set c $expect_out(2,string)
			if { [fcmp $c 2 $epsilon] != 0 } {
				fail "$test c should be 2, not $c"
			} else {
				set b $expect_out(3,string)
				if { [fcmp $b 6 $epsilon] != 0 } {
					fail "$test b should be 6, not $b"
				} else {
					set P $expect_out(4,string)
					if { [fcmp $P 0.2 $epsilon] != 0 } {
						fail "$test P should be 0.2, not $P"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Another out-of-order test.
#
set test "create_args_out_of_order_312"
send "triangular (6,1,2)\n"
expect {
	-re "<triangular probability distribution\[\\n\\r\]+ a=($floatpat), c=($floatpat), b=($floatpat)\[\\n\\r\]+ P=($floatpat)>.*$prompt$" {
		set a $expect_out(1,string)
		if { [fcmp $a 1 $epsilon] != 0 } {
			fail "$test a should be 1, not $a"
		} else {
			set c $expect_out(2,string)
			if { [fcmp $c 2 $epsilon] != 0 } {
				fail "$test c should be 2, not $c"
			} else {
				set b $expect_out(3,string)
				if { [fcmp $b 6 $epsilon] != 0 } {
					fail "$test b should be 6, not $b"
				} else {
					set P $expect_out(4,string)
					if { [fcmp $P 0.2 $epsilon] != 0 } {
						fail "$test P should be 0.2, not $P"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Another out-of-order test.
#
set test "create_args_out_of_order_321"
send "triangular (6,2,1)\n"
expect {
	-re "<triangular probability distribution\[\\n\\r\]+ a=($floatpat), c=($floatpat), b=($floatpat)\[\\n\\r\]+ P=($floatpat)>.*$prompt$" {
		set a $expect_out(1,string)
		if { [fcmp $a 1 $epsilon] != 0 } {
			fail "$test a should be 1, not $a"
		} else {
			set c $expect_out(2,string)
			if { [fcmp $c 2 $epsilon] != 0 } {
				fail "$test c should be 2, not $c"
			} else {
				set b $expect_out(3,string)
				if { [fcmp $b 6 $epsilon] != 0 } {
					fail "$test b should be 6, not $b"
				} else {
					set P $expect_out(4,string)
					if { [fcmp $P 0.2 $epsilon] != 0 } {
						fail "$test P should be 0.2, not $P"
					} else {
						pass "$test"
					}
				}
			}
		}
	}
}



#
# Test the probability density function.
#
set xvalues {0 1 1.5 2 3 5.5 6 10}
set answers {0 0 0.2 0.4 0.3 0.05 0 0}
pdf_test $xvalues $answers



#
# Test the cumulative distribution function and its inverse.
#
set xvalues {0 1 1.5 2 3 5.5 6 10}
set answers {0 0 0.05 0.2 0.55 0.9875 1 1}
cdf_test $xvalues $answers



#
# Test random number generation.
#
set true_answer {0 0.2 0.35 0.25 0.15 0.05 0}
random_number_test $true_answer 0



#
# Test statistics.
#
#set min
#set max
#set mean
#set variance
#statistics_test $min $max $mean $variance
sample_statistics_test



