set timeout 10
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
	-re "\[^\n\r\]*$prompt$" {
		fail "$test (bad match)"
		if { $verbose > 0 } {
			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
						$expect_out(buffer) "" output
			send_user "\tUnmatched output: \"$output\"\n"
		}
	}
	timeout {
		fail "$test (timeout)"
	}
}



#
# Test that the parameters are set correctly when a uniform distribution is
# created.
#
set test "create1"
send "uniform (0,1)\n"
expect {
	-re "<uniform \\(flat\\) probability distribution\[\\n\\r\]+ from ($floatpat) to ($floatpat)>.*$prompt$" {
		set lower_bound $expect_out(1,string)
		if { [fcmp $lower_bound 0 $epsilon] != 0 } {
			fail "$test lower bound should be 0, not $lower_bound"
		} else {
			set upper_bound $expect_out(2,string)
			if { [fcmp $upper_bound 1 $epsilon] != 0 } {
				fail "$test upper bound should be 1, not $upper_bound"
			} else {
				pass "$test"
			}
		}
	}
}



#
# Test giving the lower and upper bounds out of order.  The function shouldn't
# care.
#
set test "create_args_out_of_order"
send "uniform (3,-1)\n"
expect {
	-re "<uniform \\(flat\\) probability distribution\[\\n\\r\]+ from ($floatpat) to ($floatpat)>.*$prompt$" {
		set lower_bound $expect_out(1,string)
		if { [fcmp $lower_bound -1 $epsilon] != 0 } {
			fail "$test lower bound should be -1, not $lower_bound"
		} else {
			set upper_bound $expect_out(2,string)
			if { [fcmp $upper_bound 3 $epsilon] != 0 } {
				fail "$test upper bound should be 3, not $upper_bound"
			} else {
				pass "$test"
			}
		}
	}
}



#
# Test the probability density function.  Give values
# - outside the bounds
# - exactly at the lower and upper bounds
# - inside the bounds
#
set xvalues {-1.5 0 1 2.999 3.5}
set answers {0 0.25 0.25 0.25 0}
pdf_test $xvalues $answers



#
# Sources disagree on the value of the function at the upper bound.  The
# implementation in the GNU Scientific Library says it's zero, the NIST/
# SEMATECH engineering statistics handbook says it's non-zero, and
# mathworld.com declines to say.  So allow either.
#
set test "pdf_upper_bound"
send "pdf (3)\n"
expect {
	-re "($floatpat)\[\\n\\r\]+$prompt$" {
		set answer $expect_out(1,string)
		if { [fcmp $answer 0 $epsilon] == 0 || [fcmp $answer 1 $epsilon] == 0.25} {
			pass "$test"
		} else {
			fail "$test pdf(3) = 0 or 0.25 (depending on who you ask), not $answer"
		}			
	}
}



#
# Test the cumulative distribution function and its inverse.
#
set xvalues {-1.5 -1 0 2 3 3.5}
set answers {0 0 0.25 0.75 1 1}
cdf_test $xvalues $answers



#
# Test random number generation.
#
set true_answer { 0 0 0 0.25 0.25 0.25 0.25 0 0 0 }
random_number_test $true_answer -4



#
# Test statistics.
#
#set min -1
#set max 3
#set mean 2
#set variance 4.0/3.0
#statistics_test $min $max $mean $variance
sample_statistics_test



